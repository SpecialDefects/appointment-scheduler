package Controller;

import Model.*;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.Initializable;
import javafx.scene.control.Button;
import javafx.scene.control.ChoiceBox;
import javafx.scene.control.Label;
import javafx.scene.control.TextField;

import java.net.URL;
import java.sql.SQLException;
import java.util.ResourceBundle;

public class CreateCustomerController implements Initializable, LoadableController {

    public Button createButton;
    public Button cancelButton;

    public ChoiceBox countryPicker;
    public ChoiceBox divisionPicker;
    public TextField phoneTextField;
    public TextField nameTextField;
    public TextField addressTextField;
    public TextField postalTextField;
    public TextField idTextField;

    public Label idLabel;
    public Label nameLabel;
    public Label addressLabel;
    public Label postalLabel;
    public Label phoneLabel;
    public Label countryLabel;
    public Label divisionLabel;

    private ObservableList<Country> countries;
    private ObservableList<Division> divisions;

    @Override
    public void initialize(URL url, ResourceBundle resourceBundle) {
        try {
            countries = UserDao.getAllCountries();
            divisions = UserDao.getAllDivisions();
        } catch (SQLException throwables) {
            throwables.printStackTrace();
        }
        /** button translation **/
        createButton.setText(Translator.getTranslation("create"));
        cancelButton.setText(Translator.getTranslation("cancel"));
        /** textfield translation **/
        idTextField.setPromptText(Translator.getTranslation("autogenerated"));
        /** label translation **/
        idLabel.setText(Translator.getTranslation("id"));
        nameLabel.setText(Translator.getTranslation("name"));
        addressLabel.setText(Translator.getTranslation("address"));
        postalLabel.setText(Translator.getTranslation("postalcode"));
        phoneLabel.setText(Translator.getTranslation("phone"));
        countryLabel.setText(Translator.getTranslation("country"));
        divisionLabel.setText(Translator.getTranslation("division"));

        /** hide division picker and label when no country is picked **/
        divisionPicker.setOpacity(0);
        divisionLabel.setOpacity(0);

        /** populate country picker **/
        countryPicker.setItems(countries);
    }

    @Override
    public void load(Appointment appointment) {

    }

    @Override
    public void load(Customer customer) {

    }

    /** insert user input for new customer into database **/
    public void handleCreate(ActionEvent actionEvent) throws Exception {
        String name = nameTextField.getText();
        String address = addressTextField.getText();
        String postalCode = postalTextField.getText();
        String phone = phoneTextField.getText();
        int division_id = ((Division) divisionPicker.getSelectionModel().getSelectedItem()).getId();

        UserDao.createCustomer(name, address, postalCode, phone, division_id, UserDao.getLoggedInUser().getID());
        ViewCreator.createView("mainmenu", "MainMenu", 900, 500, actionEvent, this);
    }

    /** return to mainmenu **/
    public void handleCancel(ActionEvent actionEvent) throws Exception {
        ViewCreator.createView("mainmenu", "MainMenu", 900, 500, actionEvent, this);
    }

    /** filter division picker based on country picker selection **/
    public void handleCountryPicker(ActionEvent actionEvent) throws Exception {
        Country pickedCountry = (Country) countryPicker.getSelectionModel().getSelectedItem();
        if (pickedCountry != null) {
            /** if divisionlabel and picker are hidden, unhide them **/
            if (divisionLabel.getOpacity() == 0) {
                divisionLabel.setOpacity(1);
                divisionPicker.setOpacity(1);
            }
            if (pickedCountry.getId() == 1) {
                divisionLabel.setText(Translator.getTranslation("state"));
            } else if (pickedCountry.getId() == 2) {
                divisionLabel.setText(Translator.getTranslation("nation"));
            }
            else {
                divisionLabel.setText(Translator.getTranslation("province"));
            }
            /** filter only division that belong to the currently picked country **/
            /** LAMBDA #1 **/
            divisionPicker.setItems(divisions.filtered(division -> division.getCountryId() == pickedCountry.getId()));
        }

    }
}
