package Controller;

import Model.*;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.Initializable;
import javafx.scene.control.Button;
import javafx.scene.control.ChoiceBox;
import javafx.scene.control.Label;
import javafx.scene.control.TextField;

import java.net.URL;
import java.sql.SQLException;
import java.util.ResourceBundle;

/**
 * control create customer view
 */
public class CreateCustomerController implements Initializable, LoadableController {

    /** create button **/
    public Button createButton;
    /** cancel button **/
    public Button cancelButton;

    /** country choicebox **/
    public ChoiceBox countryPicker;
    /** division choicebox **/
    public ChoiceBox divisionPicker;

    /** phone textfield **/
    public TextField phoneTextField;
    /** name textfield **/
    public TextField nameTextField;
    /** address textfield **/
    public TextField addressTextField;
    /** postal textfield **/
    public TextField postalTextField;
    /** id textfield **/
    public TextField idTextField;

    /** id label **/
    public Label idLabel;
    /** name label **/
    public Label nameLabel;
    /** address label **/
    public Label addressLabel;
    /** postal label **/
    public Label postalLabel;
    /** phone label **/
    public Label phoneLabel;
    /** country label **/
    public Label countryLabel;
    /** division label **/
    public Label divisionLabel;

    /** list of countries **/
    private ObservableList<Country> countries;
    /** list of divisions **/
    private ObservableList<Division> divisions;

    /**
     * initialize create customer view to default state
     * @param url
     * @param resourceBundle
     */
    @Override
    public void initialize(URL url, ResourceBundle resourceBundle) {
        try {
            /** populate country and division lists with all options **/
            countries = UserDao.getAllCountries();
            divisions = UserDao.getAllDivisions();
        } catch (SQLException throwables) {
            throwables.printStackTrace();
        }
        /** button translation **/
        createButton.setText(Translator.getTranslation("create"));
        cancelButton.setText(Translator.getTranslation("cancel"));
        /** textfield translation **/
        idTextField.setPromptText(Translator.getTranslation("autogenerated"));
        /** label translation **/
        idLabel.setText(Translator.getTranslation("id"));
        nameLabel.setText(Translator.getTranslation("name"));
        addressLabel.setText(Translator.getTranslation("address"));
        postalLabel.setText(Translator.getTranslation("postalcode"));
        phoneLabel.setText(Translator.getTranslation("phone"));
        countryLabel.setText(Translator.getTranslation("country"));
        divisionLabel.setText(Translator.getTranslation("division"));

        /** hide division picker and label when no country is picked **/
        divisionPicker.setOpacity(0);
        divisionLabel.setOpacity(0);

        /** populate country picker **/
        countryPicker.setItems(countries);
    }

    /**
     *
     * @param appointment
     */
    @Override
    public void load(Appointment appointment) { }

    /**
     *
     * @param customer
     */
    @Override
    public void load(Customer customer) { }

    /**
     * handle user creation from user input
     * @param actionEvent
     * @throws Exception
     */
    public void handleCreate(ActionEvent actionEvent) throws Exception {
        String name = nameTextField.getText();
        String address = addressTextField.getText();
        String postalCode = postalTextField.getText();
        String phone = phoneTextField.getText();
        int division_id = ((Division) divisionPicker.getSelectionModel().getSelectedItem()).getId();

        UserDao.createCustomer(name, address, postalCode, phone, division_id, UserDao.getLoggedInUser().getId());
        ViewCreator.createView("mainmenu", "MainMenu", 900, 500, actionEvent, this);
    }

    /**
     * return to mainmenu
     * @param actionEvent
     * @throws Exception
     */
    public void handleCancel(ActionEvent actionEvent) throws Exception {
        ViewCreator.createView("mainmenu", "MainMenu", 900, 500, actionEvent, this);
    }


    /**
     * filter division picker based on country picker selection,
     * lambda is used to filter the divisions list without requiring another database call or bulky helper method
     * @param actionEvent
     * @throws Exception
     */
    public void handleCountryPicker(ActionEvent actionEvent) {
        Country pickedCountry = (Country) countryPicker.getSelectionModel().getSelectedItem();
        if (pickedCountry != null) {
            /** if divisionlabel and picker are hidden, unhide them **/
            if (divisionLabel.getOpacity() == 0) {
                divisionLabel.setOpacity(1);
                divisionPicker.setOpacity(1);
            }
            /** change division label based on selected country's division semantics **/
            if (pickedCountry.getId() == 1) {
                divisionLabel.setText(Translator.getTranslation("state"));
            } else if (pickedCountry.getId() == 2) {
                divisionLabel.setText(Translator.getTranslation("nation"));
            }
            else {
                divisionLabel.setText(Translator.getTranslation("province"));
            }
            /** LAMBDA **/
            /** filter only division that belong to the currently picked country, avoids having another Database call or lengthy method **/
            divisionPicker.setItems(divisions.filtered(division -> division.getCountryId() == pickedCountry.getId()));
        }
    }
}
