package Controller;

import Model.*;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.Initializable;
import javafx.scene.control.*;

import java.io.IOException;
import java.net.URL;
import java.time.Duration;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ResourceBundle;

/**
 * controls the create appointment view
 */
public class CreateAppointmentController implements Initializable, LoadableController {

    /** cancel button **/
    public Button cancelButton;
    /** create button **/
    public Button createButton;

    /** title textfield **/
    public TextField titleTextField;
    /** customer textfield **/
    public TextField customerTextField;
    /** location textfield **/
    public TextField locationTextField;
    /** type textfield **/
    public TextField typeTextField;
    /** id textfield **/
    public TextField idTextField;
    /** user textfield **/
    public TextField userTextField;

    /** description text area **/
    public TextArea descriptionTextArea;

    /** id label **/
    public Label idLabel;
    /** title label **/
    public Label titleLabel;
    /** location label **/
    public Label locationLabel;
    /** type label **/
    public Label typeLabel;
    /** customer label **/
    public Label customerLabel;
    /** user label **/
    public Label userLabel;
    /** description label **/
    public Label descriptionLabel;
    /** contact label **/
    public Label contactLabel;
    /** start date label **/
    public Label startDateLabel;
    /** start time label **/
    public Label startTimeLabel;
    /** end time label **/
    public Label endTimeLabel;

    /** start date picker **/
    public DatePicker startDatePicker;

    /** start time combo box **/
    public ComboBox startTimePicker;
    /** end time combo box **/
    public ComboBox endTimePicker;

    /** contact choice box **/
    public ChoiceBox contactPicker;


    /**
     * initialize create appointment view to default state
     * @param url
     * @param resourceBundle
     */
    @Override
    public void initialize(URL url, ResourceBundle resourceBundle) {

        /** translate all labels based on user locale **/
        idLabel.setText(Translator.getTranslation("id"));
        titleLabel.setText(Translator.getTranslation("title"));
        typeLabel.setText(Translator.getTranslation("type"));
        customerLabel.setText(Translator.getTranslation("customerid"));
        userLabel.setText(Translator.getTranslation("userid"));
        descriptionLabel.setText(Translator.getTranslation("description"));
        contactLabel.setText(Translator.getTranslation("contact"));
        startDateLabel.setText(Translator.getTranslation("startdate"));
        startTimeLabel.setText(Translator.getTranslation("starttime"));
        endTimeLabel.setText(Translator.getTranslation("endtime"));

        /** translate button text based on user locale **/
        createButton.setText(Translator.getTranslation("create"));
        cancelButton.setText(Translator.getTranslation("cancel"));

        /** set id prompt to text based on user locale **/
        idTextField.setPromptText(Translator.getTranslation("autogenerated"));

        /** populate contacts choicebox **/
        contactPicker.setItems(UserDao.getAllContacts());

        /** create lists to calculate available appointment times **/
        ObservableList<Integer> hours = FXCollections.observableArrayList();
        ObservableList<String> minutes = FXCollections.observableArrayList();
        hours.addAll(8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22);
        minutes.addAll("00", "30");
        ObservableList<String> times = FXCollections.observableArrayList();

        /** adjust times to fit users time zone **/
        LocalDateTime curr = LocalDateTime.now();
        ZonedDateTime buisnessTime = curr.atZone(ZoneId.of("America/New_York"));
        ZonedDateTime userTime = curr.atZone(UserDao.getZone());
        int diffHours = (int) Duration.between(buisnessTime, userTime).toHours();
        int startTime = 8 - diffHours;
        for (int hour : hours) {
            for (String minute : minutes) {
                int offsetHours = (hour - diffHours) % 24;
                if (offsetHours < 10) {
                    times.add("0" + offsetHours + ":" + minute);
                } else {
                    times.add((offsetHours) + ":" + minute);
                }
                if ((offsetHours == (startTime + 14) % 24) ) { break; }
            }
        }
        /** populate time choices **/
        startTimePicker.setItems(times);
        endTimePicker.setItems(times);
    }

    /**
     *
     * @param appointment
     */
    @Override
    public void load(Appointment appointment) { }

    /**
     *
     * @param customer
     */
    @Override
    public void load(Customer customer) { }

    /**
     * handle creation of new appointment
     * @param actionEvent
     * @throws Exception
     */
    public void handleCreate(ActionEvent actionEvent) throws Exception {
        String title;
        String type;
        String description;
        String location;
        int customerId;
        int userId;
        int contact;
        LocalDateTime startDateTime;
        LocalDateTime endDateTime;
        try {
            /** get appointment title **/
            try {
                title = titleTextField.getText();
            } catch (Exception e) {
                throw new Exception("titleerror");
            }
            /** if title is empty throw exception **/
            if (title.length() == 0) { throw new Exception("titleblank"); }

            /** get appointment type **/
            try {
                type = typeTextField.getText();
            } catch (Exception e) {
                throw new Exception("typeerror");
            }
            /** if type is empty throw exception **/
            if (type.length() == 0) { throw new Exception("typeblank"); }

            /** get appointment description **/
            try {
                description = descriptionTextArea.getText();
            } catch (Exception e) {
                throw new Exception("descriptionerror");
            }
            /** if description throw exception **/
            if (description.length() == 0) { throw new Exception("descriptionblank"); };

            /** get appointment location **/
            try {
                location = locationTextField.getText();
            } catch (Exception e) {
                throw new Exception("locationerror");
            }
            /** if location is blank throw exception **/
            if (location.length() == 0) { throw new Exception("locationblank"); }

            /** get customer_id for appointment **/
            /** throw exception if not parseable to integer **/
            try {
                customerId = Integer.parseInt(customerTextField.getText());
            } catch (Exception e) {
                throw new Exception("customererror");
            }

            /** get user_id for appointment **/
            /** throw exception if not parseable to integer **/
            try {
                userId = Integer.parseInt(userTextField.getText());
            } catch (Exception e) {
                throw new Exception("usererror");
            }

            /** get Contact for appointment **/
            /** throw exception if no contact is selected **/
            try {
                contact = ((Contact) contactPicker.getValue()).getId();
            } catch (Exception e) {
                throw new Exception("contacterror");
            }

            /** get start time for appointment **/
            /** throw exception if start time isn't valid **/
            try {
                String startDate = startDatePicker.getValue().toString();
                String startTime = startTimePicker.getValue().toString();
                DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm");
                startDateTime = LocalDateTime.parse(startDate + " " + startTime, formatter);
            } catch (Exception e) {
                throw new Exception("starttimeerror");
            }
            if (startDateTime.getDayOfWeek().toString() == "SATURDAY" || startDateTime.getDayOfWeek().toString() == "SUNDAY") {
                throw new Exception("starttimeweekend");
            };

            /** get end time for appoint **/
            /** throw exception if end time isn't valid **/
            try {
                String endDate = startDatePicker.getValue().toString();
                String endTime = endTimePicker.getValue().toString();
                DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm");
                endDateTime = LocalDateTime.parse(endDate + " " + endTime, formatter);
            } catch (Exception e) {
                throw new Exception("endtimeerror");
            }
            if (endDateTime.getDayOfWeek().toString() == "SATURDAY" || endDateTime.getDayOfWeek().toString() == "SUNDAY") {
                throw new Exception("endtimeweekend");
            };

            /** throw exception if endDate is before start date **/
            if (endDateTime.isBefore(startDateTime)) {
                throw new Exception("endtimebefore");
            }
            /** create new appointment from user input **/
            Appointment newAppointment = new Appointment(title, description, location, type,
                    startDateTime,
                    endDateTime,
                    customerId, userId, contact);
            /** insert new appointment into database **/
            UserDao.createAppointment(newAppointment);
            /** return to main menu **/
            ViewCreator.createViewWithAppointment("mainmenu", "MainMenu", 900, 500, actionEvent, this, newAppointment);
        } catch (Exception e) {
            PopUpBox.displayError(e.getMessage());
        }
    }

    /**
     * handle cancel button action, return to main menu
     * @param actionEvent
     * @throws IOException
     */
    public void handleCancel(ActionEvent actionEvent) throws IOException {
        ViewCreator.createView("mainmenu", "MainMenu", 900, 500, actionEvent, this);
    }
}
